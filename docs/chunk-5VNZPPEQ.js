import{Ba as e,Ea as m,Q as a,va as t,wa as n}from"./chunk-TXDHCQSB.js";var s=class r{static \u0275fac=function(i){return new(i||r)};static \u0275cmp=a({type:r,selectors:[["app-ai-summarizer"]],standalone:!0,features:[m],decls:173,vars:0,consts:[[1,"ai-summarizer-container"],[1,"overview"],[1,"tech-stack"],[1,"key-features"],[1,"project-components"],[1,"component"],[1,"language-python"],[1,"language-json"],[1,"approach-process"],[1,"results"],[1,"lessons-learned"],[1,"future-work"]],template:function(i,o){i&1&&(t(0,"div",0)(1,"h1"),e(2,"AI Note Summarizer"),n(),t(3,"section",1)(4,"h2"),e(5,"Overview"),n(),t(6,"p"),e(7,"I developed this project to summarize long technical documents and notes into key highlights while maintaining essential information. Avoids the hassle of using external AI services (e.g., subscriptions, over-explanation) so instead, I created my own summarization AI tool for concise notes with actionable insights. I use this mostly for extracting key information from technical notes, but it works well with notes that have sequences or even guides."),n(),t(8,"p"),e(9,"I developed this project to summarize long technical documents and notes into key highlights while maintaining essential information. This avoids the hassle of using external AI services (e.g., subscriptions, over-explanation), so instead I created my own summarization AI tool for concise notes with actionable insights. I use this mostly for extracting key information from technical notes, but it works well with notes that have sequences or even extracting key details from guides."),n()(),t(10,"section",2)(11,"h2"),e(12,"Tech Stack"),n(),t(13,"ul")(14,"li")(15,"strong"),e(16,"Backend:"),n(),e(17," Python, Flask, Hugging Face Transformers (T5 Model)"),n(),t(18,"li")(19,"strong"),e(20,"Frontend:"),n(),e(21," React, HTML, CSS"),n(),t(22,"li")(23,"strong"),e(24,"Libraries:"),n(),e(25," NLTK, SacreBLEU, ROUGE scorer"),n(),t(26,"li")(27,"strong"),e(28,"Storage & Configuration:"),n(),e(29," JSON-based configuration for hyperparameters"),n()()(),t(30,"section",3)(31,"h2"),e(32,"Key Features"),n(),t(33,"ul")(34,"li"),e(35,"Hyperparameter tuning using grid search."),n(),t(36,"li"),e(37,"REST API for summarization."),n(),t(38,"li"),e(39,"Text file for summarization."),n(),t(40,"li"),e(41,"Evaluation metrics (ROUGE, BLEU, METEOR) for summary quality."),n(),t(42,"li"),e(43,"Stores grid search metrics in Excel document for hyperparameter tuning."),n()()(),t(44,"section",4)(45,"h2"),e(46,"Project Components"),n(),t(47,"div",5)(48,"h3"),e(49,"Grid Search for Hyperparameters"),n(),t(50,"p"),e(51,"Tuning: Optimize T5 model performance by tuning hyperparameters like max_length, min_length, num_beams, etc."),n(),t(52,"pre")(53,"code",6),e(54,`
                  # Example of grid search parameters
                  max_lengths = [150, 175, 200, 350]
                  min_lengths = [50, 75, 100, 150]
                  num_beams = [2, 4, 6, 8]
                  length_penalties = [0.8, 1.0, 1.2, 1.5]
                  top_ks = [30, 50, 70, 90]
                  top_ps = [0.8, 0.9, 1.0, 1.1]
                  repetition_penalties = [1.0, 1.2, 1.5, 2.0]
                `),n()(),t(55,"p"),e(56,"Visual: Add a table or chart showing the top-performing hyperparameter combinations (e.g., from sorted_grid_search_results.csv)."),n()(),t(57,"div",5)(58,"h3"),e(59,"Configuration Management"),n(),t(60,"p"),e(61,"Hyperparameter settings across runs using a JSON configuration file."),n(),t(62,"pre")(63,"code",7),e(64,`
                  {
                  "model_name": "t5-base",
                  "max_length": 175,
                  "min_length": 75,
                  "num_beams": 6,
                  "length_penalty": 0.8,
                  "top_k": 70,
                  "top_p": 0.9,
                  "repetition_penalty": 1.2
                  }
                `),n()(),t(65,"p"),e(66,"Visual: Add a screenshot of the config.json file or a diagram showing how the configuration is used in the pipeline."),n()(),t(67,"div",5)(68,"h3"),e(69,"Note Formatting Pipeline"),n(),t(70,"p"),e(71,"Preprocess input text, generates summaries, and evaluates quality using ROUGE, BLEU, and METEOR scores."),n(),t(72,"pre")(73,"code",6),e(74,`
          def simplify_notes(text):
              input_text = "summarize the following technical notes in detail: " + text
              inputs = tokenizer.encode(input_text, return_tensors="pt", max_length=512, truncation=True)
              summary_ids = model.generate(inputs, max_length=config["max_length"], min_length=config["min_length"], num_beams=config["num_beams"], early_stopping=True)
              summary = tokenizer.decode(summary_ids[0], skip_special_tokens=True)
              return summary
                `),n()(),t(75,"p"),e(76,"Visual: Add before-and-after examples of input text and generated summaries (e.g., input_notes.txt vs. out_notes.txt)."),n()(),t(77,"div",5)(78,"h3"),e(79,"REST API for Summarization"),n(),t(80,"p"),e(81,"Exposes the summarization functionality via a Flask API."),n(),t(82,"pre")(83,"code",6),e(84,`
                  @app.route('/summarize', methods=['POST'])
                  def summarize():
                  data = request.json
                  text = data.get('text', '')
                  summary = simplify_notes(text)
                  return jsonify({"summary": summary})
                `),n()(),t(85,"p"),e(86,"Visual: Add a screenshot of a sample API request/response using tools like Postman or cURL."),n()()(),t(87,"section",8)(88,"h2"),e(89,"Approach & Process"),n(),t(90,"ol")(91,"li"),e(92,"Define key hyperparameters in config.json. "),t(93,"p"),e(94,"Visual: Add a diagram or flowchart showing the hyperparameter tuning process."),n()(),t(95,"li"),e(96,"Preprocess input text and tokenize it. "),t(97,"p"),e(98,"Visual: Add an image of the input text and tokenized output."),n()(),t(99,"li"),e(100,"Generate summaries using beam search & top-k sampling. "),t(101,"p"),e(102,"Visual: Add a diagram or screenshot of the beam search process."),n()(),t(103,"li"),e(104,"Compute evaluation metrics (ROUGE, BLEU, METEOR). "),t(105,"p"),e(106,"Visual: Add a table or chart showing the evaluation scores."),n()(),t(107,"li"),e(108,"Store and analyze results in sorted_grid_search_results.csv. "),t(109,"p"),e(110,"Visual: Add a sample of the CSV file or a chart showing the top results."),n()()()(),t(111,"section",9)(112,"h2"),e(113,"Results"),n(),t(114,"p")(115,"strong"),e(116,"Sample Input:"),n()(),t(117,"pre")(118,"code"),e(119,"Full Stack Developer with over 4 years of professional experience..."),n()(),t(120,"p")(121,"strong"),e(122,"Generated Summary:"),n()(),t(123,"pre")(124,"code"),e(125,"Full Stack Developer with over 4 years of experience. Holds a Bachelor of Science in Computer Information Systems. Currently pursuing a Master\u2019s in AI & Machine Learning."),n()(),t(126,"h3"),e(127,"Performance Metrics:"),n(),t(128,"table")(129,"thead")(130,"tr")(131,"th"),e(132,"Metric"),n(),t(133,"th"),e(134,"Score"),n()()(),t(135,"tbody")(136,"tr")(137,"td"),e(138,"ROUGE-1"),n(),t(139,"td"),e(140,"0.618"),n()(),t(141,"tr")(142,"td"),e(143,"BLEU"),n(),t(144,"td"),e(145,"25.75"),n()(),t(146,"tr")(147,"td"),e(148,"METEOR"),n(),t(149,"td"),e(150,"0.60"),n()()()()(),t(151,"section",10)(152,"h2"),e(153,"Lessons Learned"),n(),t(154,"ul")(155,"li"),e(156,"Hyperparameter tuning significantly impacts summary quality."),n(),t(157,"li"),e(158,"Longer summaries can introduce unnecessary repetition."),n(),t(159,"li"),e(160,"The model struggles with very short summaries, requiring fine-tuned length penalties."),n()()(),t(161,"section",11)(162,"h2"),e(163,"Future Work"),n(),t(164,"ul")(165,"li"),e(166,"Create a custom model for better performance."),n(),t(167,"li"),e(168,"Build a larger dataset for improved results."),n(),t(169,"li"),e(170,"Handle edge cases (e.g., very short or very long input text)."),n(),t(171,"li"),e(172,"https://huggingface.co/learn/nlp-course/en/chapter7/5?utm_source=chatgpt.com."),n()()()())}})};export{s as AiSummarizerComponent};
